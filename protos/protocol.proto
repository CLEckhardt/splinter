// Copyright 2018 Cargill Incorporated
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// Splinter Messages
//
message Message {
    MessageType message_type = 1;

    // Circuit Messages

    CircuitCreateRequest circuit_create_request = 2;
    CircuitCreateResponse circuit_create_response = 3;

    CircuitDestroyRequest circuit_destroy_request = 4;
    CircuitDestroyResponse circuit_destroy_response = 5;

    CircuitGossipMessageRequest gossip_message_request = 6;
    CircuitGossipMessageResponse gossip_message_response = 7;

    CircuitSendDirectMessageRequest circuit_send_direct_message_request = 8;
    CircuitSendDirectMessageResponse circuit_send_direct_message_response = 9;

    // Network messages

    ServiceRegisterRequest service_register_request = 200;
    ServiceRegisterResponse service_register_response = 201;

    ServiceUnregisterRequest service_unregister_request = 202;

    CircuitDirectoryNotifyRequest circuit_directory_notify_request = 204;
    CircuitDirectoryNotifyResponse circuit_directory_notify_response = 205;

    CircuitGossipAddedService gossip_added_service = 206;
    CircuitGossipRemovedService gossip_removed_service = 207;
}

enum MessageType {
    UNSET = 0;

    // Create Circuit
    CIRCUIT_CREATE_REQUEST = 1;
    CIRCUIT_CREATE_RESPONSE = 2;

    // Destroy Circuit
    CIRCUIT_DESTROY_REQUEST = 3;
    CIRCUIT_DESTROY_RESPONSE = 4;

    // Gossip Message
    CIRCUIT_GOSSIP_MESSAGE_REQUEST = 5;
    CIRCUIT_GOSSIP_MESSAGE_RESPONSE = 6;

    // Direct Message
    CIRCUIT_SEND_DIRECT_MESSAGE_REQUEST = 7;
    CIRCUIT_SEND_DIRECT_MESSAGE_RESPONSE = 8;

    HEARTBEAT_REQUEST = 200;
    HEARTBEAT_RESPONSE = 201;

    DISCONNECT_REQUEST = 202;
    DISCONNECT_RESPONSE = 203;

    SERVICE_REGISTER_REQUEST = 204;
    SERVICE_REGISTER_RESPONSE = 205;

    SERVICE_UNREGISTER_REQUEST = 206;

    CIRCUIT_DIRECTORY_NOTIFY_REQUEST = 207;
    CIRCUIT_DIRECTORY_NOTIFY_RESPONSE = 208;

    CIRCUIT_GOSSIP_ADDED_SERVICE = 209;
    CIRCUIT_GOSSIP_REMOVED_SERVICE = 210;
}

// Represents a service and the node it is connected to.
message Service {
    // unique id for the service
    string service_id = 1;

    // the network url for the node that this service is required to connect to
    //
    // the service will connect to the service url which is different than
    // network url provided here
    string network_node_url = 2;
}

// The payload for a CREATE_CIRCUIT_REQUEST
//
message CircuitCreateRequest {
    // Unique identifier for circuit. If a circuit with
    // 'name' already exists, a CIRCUIT_ALREADY_EXISTS
    // error will be returned.
    string circuit_name = 1;

    // A list of service id and the hostnames for nodes that will be
    // a part of the splintered network
    repeated Service participants = 2;
}

// Response to a CIRCUIT_CREATE_REQUEST
//
message CircuitCreateResponse {

    enum Status {
        STATUS_UNSET = 0;
        OK = 1;
        CREATE_CIRCUIT_ERROR = 2;
        CIRCUIT_ALREADY_EXISTS = 3;
        SPLINTER_INTERNAL_ERROR = 4;
    }

    // the name of circuit
    string circuit_name = 1;

    // A list of service id and the hostnames for nodes that will be
    // a part of the splintered network
    repeated Service participants = 2;

    Status status = 3;

    // The error_message field will only be filled if there was an error
    string error_message = 4;
}

// The payload for a CIRCUIT_DESTROY_REQUEST request
//
message CircuitDestroyRequest {
    // Name of the circuit to be destroyed
    string circuit_name = 1;
}

// Response to a CIRCUIT_DESTROY_REQUEST request
//
message CircuitDestroyResponse {

    enum Status {
        STATUS_UNSET = 0;
        OK = 1;
        DESTROY_CIRCUIT_ERROR = 2;
        CIRCUIT_DOES_NOT_EXIST = 3;
        SPLINTER_INTERNAL_ERROR = 4;
    }

    // the name of the destroyed circuit
    string circuit_name = 1;

    Status status = 2;

    // The error_message field will only be filled if there was an error
    string error_message = 3;
}


// The payload for a CIRCUIT_GOSSIP_MESSAGE_REQUEST
//
message CircuitGossipMessageRequest {
    // name - Name of the circuit the message will be sent to
    string circuit_name = 1;

    // The bytes describing the message being sent
    bytes payload = 2;
}

// Response to a CIRCUIT_GOSSIP_MESSAGE_REQUEST
//
// payloads - response payload from participants
message CircuitGossipMessageResponse {

    enum Status {
        STATUS_UNSET = 0;
        OK = 1;
        GOSSIP_MESSAGE_ERROR = 2;
        CIRCUIT_DOES_NOT_EXIST = 3;
        SPLINTER_INTERNAL_ERROR = 4;
    }

    message ResponsePayload {
        Service participant = 1;
        bytes payload = 2;
    }

    repeated ResponsePayload payloads = 1;

    Status status = 3;

    // The error_message field will only be filled if there was an error
    string error_message = 4;
}

// The payload for a CIRCUIT_SEND_DIRECT_MESSAGE_REQUEST
//
message CircuitSendDirectMessageRequest {
    // Name of the circuit the message will be sent to
    string circuit_name = 1;

    // The ID of the service the message is for
    string recipient_service_id = 2;

    // payload - The bytes describing the message being sent
    bytes payload = 3;
}

// Response to a CIRCUIT_SEND_DIRECT_MESSAGE_REQUEST
//
message CircuitSendDirectMessageResponse {

    enum Status {
        STATUS_UNSET = 0;
        OK = 1;
        DIRECT_MESSAGE_ERROR = 2;
        CIRCUIT_DOES_NOT_EXIST = 3;
        SPLINTER_INTERNAL_ERROR = 4;
    }

    // Name of the circuit the message will be sent to
    string circuit_name = 1;

    // The ID of the service the message is for
    string recipient_service_id = 2;

    // The bytes describing the message being sent
    bytes payload = 3;

    Status status = 4;

    // The error_message field will only be filled if there was an error
    string error_message = 5;
}

// The payload for SERVICE_REGISTER_REQUEST
// Sent from a service to a node to register the service
//
message ServiceRegisterRequest {
    // The Unique ID of the service
    string service_id = 1;
}

// The response for SERVICE_REGISTER_REQUEST
//
message ServiceRegisterResponse {

    enum Status {
        STATUS_UNSET = 0;
        OK = 1;
        SERVICE_REGISTER_ERROR = 2;
        SERVICE_ALREADY_EXISTS = 3;
        SPLINTER_INTERNAL_ERROR = 4;
    }

    // The Unique ID of the service that was registered
    string service_id = 1;

    Status status = 2;

    // The error_message field will only be filled if there was an error
    string error_message = 3;
}

// The payload to SERVICE_UNREGISTER_REQUEST
// This message does not have a response as the service may already be gone by
// the time the response would be sent.
//
message ServiceUnregisterRequest {

    enum Status {
        STATUS_UNSET = 0;
        OK = 1;
        SERVICE_UNREGISTER_ERROR = 2;
        SERVICE_DOES_NOT_EXIST = 3;
        SPLINTER_INTERNAL_ERROR = 4;
    }

    //  The Unique ID of the service
    string service_id = 1;

    Status status = 2;

    // The error_message field will only be filled if there was an error
    string error_message = 3;
}

// Request transfer the current directory
// This should be sent to by new node that has just connected to the network
// To its peers
message CircuitDirectoryNotifyRequest {
    // The network url for the node requesting the directory
    string node_url = 1;
}

// Transfer the current directory
// This should be sent to a new node that has just connected to the network
message CircuitDirectoryNotifyResponse {

    enum Status {
        STATUS_UNSET = 0;
        OK = 1;
        DIRECTORY_NOTIFY_ERROR = 2;
        SPLINTER_INTERNAL_ERROR = 3;
    }

    // registered service
    repeated Service services = 1;

    Status status = 2;

    // The error_message field will only be filled if there was an error
    string error_message = 3;
}

// Gossip any new registered services to peers
//
// This messages is gossiped around the network to other nodes when a
// service connects.
message CircuitGossipAddedService {
    Service service = 1;
}

// Gossip any unregistered services to peers
//
// This messages is gossiped around the network to other nodes when a
// service connects.
message CircuitGossipRemovedService {
    Service removed_service = 1;
}
