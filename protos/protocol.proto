// Copyright 2018 Cargill Incorporated
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// Message sent node to service  
//
message Message {
  MessageType message_type = 1;

  CreateCircuitRequest create_circuit_request = 2;
  CreateCircuitResponse create_circuit_response = 3;

  GossipMessageRequest gossip_message_request = 4;
  GossipMessageResponse gossip_message_response = 5;

  DestroyCircuitRequest destroy_circuit_request = 6;
  DestroyCircuitResponse destroy_circuit_response = 7;

  Error error = 8;
}

enum MessageType {

  UNSET = 0;

  // Create Circuit
  CREATE_CIRCUIT_REQUEST = 1;
  CREATE_CIRCUIT_RESPONSE = 2;

  // Destroy Circuit
  DESTROY_CIRCUIT_REQUEST = 3;
  DESTROY_CIRCUIT_RESPONSE = 4;

  // Gossip Message
  GOSSIP_MESSAGE_REQUEST = 5;
  GOSSIP_MESSAGE_RESPONSE= 6;


  // Node Errors

  CREATE_CIRCUIT_ERROR = 100;
  CIRCUIT_ALREADY_EXISTS = 101;
  DESTROY_CIRCUIT_ERROR = 102;
  CIRCUIT_DOES_NOT_EXIST = 103;
  GOSSIP_MESSAGE_ERROR = 104;
  INTERNAL_ERROR = 105;

  // Network

  HEARTBEAT_REQUEST = 200;
  HEARTBEAT_RESPONSE = 201;

  DISCONNECT_REQUEST = 202;
  DISCONNECT_RESPONSE = 203;

}

// The payload for a CREATE_CIRCUIT request
//
message CreateCircuitRequest {
  // Unique identifier for circuit. If a circuit with
  // 'name' already exists, a CIRCUIT_ALREADY_EXISTS 
  // error will be returned.
  string name = 1;

  // A list of hostnames for nodes that will be 
  // a part of the splintered network
  repeated string participants = 2;
}

// The payload for a GOSSIP_MESSAGE_REQUEST
//
message GossipMessageRequest {
  // name - Name of the circuit the message will be sent to
  string name = 1;

  // payload - The bytes describing the message being sent
  bytes payload = 2;
}

// The payload for a DESTROY_CIRCUIT request
//
message DestroyCircuitRequest {
  // name - Name of the circuit to be destroyed
  string name = 1;
}

// Response to a CREATE_CIRCUIT request
//
message CreateCircuitResponse {
  // name - name of circuit
  string name = 1;

  // participants - Nodes to be included in the circuit system
  repeated string participants = 2;
}

// Response to a GOSSIP_MESSAGE request
//
// payloads - repsonse payload from participants
message GossipMessageResponse {

  message ResponsePayload {
    string participant = 1;
    bytes payload = 2;
  }

  repeated ResponsePayload payloads = 1;
}

// Response to a DESTROY_CIRCUIT request
//
message DestroyCircuitResponse {
  // name - the name of the destroyed circuit
  string name = 1;
}

message Error {
  string error_message = 1;
}
