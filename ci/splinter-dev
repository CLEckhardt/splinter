# Copyright 2018-2021 Cargill Incorporated
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM ubuntu:focal

ENV DEBIAN_FRONTEND=noninteractive

# Install base dependencies
RUN apt-get update \
 && apt-get install -y -q \
    build-essential \
    curl \
    g++ \
    gcc \
    git \
    libpq-dev \
    libsasl2-dev \
    libssl-dev \
    libsqlite3-dev \
    libzmq3-dev \
    openssl \
    pandoc \
    pkg-config \
    python \
    unzip \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

ENV PATH=$PATH:/root/.cargo/bin

# Install Rust
RUN curl https://sh.rustup.rs -sSf > /usr/bin/rustup-init \
 && chmod +x /usr/bin/rustup-init \
 && rustup-init -y

# Install cargo deb
RUN cargo install cargo-deb

# Install protoc
RUN curl -OLsS https://github.com/google/protobuf/releases/download/v3.7.1/protoc-3.7.1-linux-x86_64.zip \
    && unzip -o protoc-3.7.1-linux-x86_64.zip -d /usr/local \
    && rm protoc-3.7.1-linux-x86_64.zip

# Install just
RUN curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin

# Create empty cargo projects for top-level projects
WORKDIR /build
RUN USER=root cargo new --bin cli
RUN USER=root cargo new --lib libsplinter
RUN USER=root cargo new --bin splinterd
RUN cp libsplinter/src/lib.rs splinterd/src/lib.rs

# Create empty Cargo projects for gameroom
RUN USER=root cargo new --bin examples/gameroom/cli
RUN USER=root cargo new --bin examples/gameroom/daemon
RUN USER=root cargo new --bin examples/gameroom/database

# Create empty Cargo projects for splinter services
RUN USER=root cargo new --bin services/health
RUN USER=root cargo new --bin services/scabbard/cli
RUN USER=root cargo new --lib services/scabbard/libscabbard

# Copy over splinter files
COPY Cargo.toml /build/Cargo.toml
COPY cli/Cargo.toml /build/cli/Cargo.toml
COPY libsplinter/build.rs /build/libsplinter/build.rs
COPY libsplinter/Cargo.toml /build/libsplinter/Cargo.toml
COPY libsplinter/protos /build/libsplinter/protos
COPY splinterd/Cargo.toml /build/splinterd/Cargo.toml
COPY services/health/Cargo.toml /build/services/health/Cargo.toml
COPY services/scabbard/cli/Cargo.toml /build/services/scabbard/cli/Cargo.toml
COPY services/scabbard/libscabbard/build.rs /build/services/scabbard/libscabbard/build.rs
COPY services/scabbard/libscabbard/Cargo.toml /build/services/scabbard/libscabbard/Cargo.toml
COPY services/scabbard/libscabbard/protos /build/services/scabbard/libscabbard/protos

# Copy over example Cargo.toml files
COPY examples/gameroom/cli/Cargo.toml \
     /build/examples/gameroom/cli/Cargo.toml
COPY examples/gameroom/daemon/Cargo.toml \
     /build/examples/gameroom/daemon/Cargo.toml
COPY examples/gameroom/database/Cargo.toml \
     /build/examples/gameroom/database/Cargo.toml

# Do release builds for each Cargo.toml
RUN find ./*/ -name 'Cargo.toml' -exec \
    sh -c 'x="{}"; echo "Building $x"; cargo build --tests --release --manifest-path "$x" --features=experimental ' \;

RUN find ./*/ -name 'Cargo.toml' -exec \
    sh -c 'x="{}"; echo "Building $x"; cargo build --tests --release --manifest-path "$x" --features=stable ' \;

RUN find ./*/ -name 'Cargo.toml' -exec \
    sh -c 'x="{}"; echo "Building $x"; cargo build --tests --release --manifest-path "$x" --features=default ' \;

RUN find ./*/ -name 'Cargo.toml' -exec \
    sh -c 'x="{}"; echo "Building $x"; cargo build --tests --release --manifest-path "$x" --no-default-features ' \;

# Clean up built files
RUN find target/release/ -name '*gameroom*' -prune -exec sh -c 'x="{}"; echo "Removing $x"; rm -rf $x' \;
RUN find target/release/ -name '*health*' -prune -exec sh -c 'x="{}"; echo "Removing $x"; rm -rf $x' \;
RUN find target/release/ -name '*scabbard*' -prune -exec sh -c 'x="{}"; echo "Removing $x"; rm -rf $x' \;
RUN find target/release/ -name '*splinter*' -prune -exec sh -c 'x="{}"; echo "Removing $x"; rm -rf $x' \;

# Clean up leftover files
RUN find . -name 'Cargo.toml' -exec \
    sh -c 'x="{}"; rm "$x" ' \;
RUN rm /build/libsplinter/build.rs \
    /build/libsplinter/protos/* \
    /build/services/scabbard/libscabbard/build.rs \
    /build/services/scabbard/libscabbard/protos/*

# Log the commit hash
COPY .git/ /tmp/.git/
WORKDIR /tmp
RUN git rev-parse HEAD > /commit-hash
WORKDIR /build
